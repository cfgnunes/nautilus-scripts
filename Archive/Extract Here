#!/usr/bin/env bash

# Import the script 'common-functions.sh'
SCRIPT_DIR=$(cd -- "$(dirname -- "${BASH_SOURCE[0]}")" &>/dev/null && pwd)
ROOT_DIR=$(grep --only-matching "^.*scripts[^/]*" <<<"$SCRIPT_DIR")
source "$ROOT_DIR/common-functions.sh"

_main() {
    local input_files=""
    local output_dir=""
    local input_file=""

    # Initial checks
    task_data="7z"
    if [[ "$(_get_distro_name)" == "fedora" ]]; then
        task_data="7za"
    fi
    _check_dependencies ""
    _display_wait_box
    input_files=$(_get_files "$*" "type=file")

    # Check dependencies for each file extension
    for input_file in $input_files; do
        case $input_file in
        *.tar.bz | *.tbz) _check_dependencies "tar" ;;
        *.tar.bz2 | *.tbz2) _check_dependencies "tar" ;;
        *.tar.gz | *.tgz) _check_dependencies "tar" ;;
        *.tar.lz | *.tlz) _check_dependencies "tar" ;;
        *.tar.lzma | *.tlzma) _check_dependencies "tar" ;;
        *.tar.lzo | *.tzo) _check_dependencies "tar" ;;
        *.tar.xz | *.txz) _check_dependencies "tar" ;;
        *.tar.Z | *.taz) _check_dependencies "tar" ;;
        *.tar.zst | *.tzst) _check_dependencies "tar" ;;
        *.7z) _check_dependencies "$task_data(p7zip-full)" ;;
        *.bz) _check_dependencies "bunzip2(bzip2)" ;;
        *.bz2) _check_dependencies "bunzip2(bzip2)" ;;
        *.deb) _check_dependencies "ar(binutils)" ;;
        *.gz) _check_dependencies "gunzip(gzip)" ;;
        *.lha) _check_dependencies "lha(lhasa)" ;;
        *.lzip) _check_dependencies "lzip" ;;
        *.lzma) _check_dependencies "unlzma(xz-utils)" ;;
        *.lzop) _check_dependencies "lzop" ;;
        *.rar) _check_dependencies "unrar" ;;
        *.squashfs | *.sfs | *.sqsh) _check_dependencies "unsquashfs(squashfs-tools)" ;;
        *.tar) _check_dependencies "tar" ;;
        *.xz) _check_dependencies "unxz(xz-utils)" ;;
        *.Z) _check_dependencies "uncompress(gzip)" ;;
        *.zst) _check_dependencies "zstd" ;;
        *) _check_dependencies "$task_data(p7zip-full)" ;;
        esac
    done

    _run_main_task_parallel "$input_files" ""
    _display_result_box ""
}

_main_task() {
    local input_file=$1
    local output_dir=$2
    local count_root_items=""
    local output_item=""
    local std_output=""
    local temp_dir_output=""

    if [[ -z "$output_dir" ]]; then
        output_dir=$(dirname -- "$input_file")
    fi

    # Extract files into a temporary directory
    filename=$(basename -- "$input_file")
    filename=$(_get_filename_without_extension "$filename")
    temp_dir_output=$(mktemp --directory --tmpdir="$output_dir" "tmp.$filename.XXXXXXXXXX")

    mkdir --parents "$temp_dir_output"
    pushd "$temp_dir_output" &>/dev/null || return 1

    # Extract the archive according the file extension
    case $input_file in
    *.tar.bz | *.tbz) std_output=$(tar --extract --bzip2 --file="$input_file" 2>&1) ;;
    *.tar.bz2 | *.tbz2) std_output=$(tar --extract --bzip2 --file="$input_file" 2>&1) ;;
    *.tar.gz | *.tgz) std_output=$(tar --extract --gzip --file="$input_file" 2>&1) ;;
    *.tar.lz | *.tlz) std_output=$(tar --extract --lzip --file="$input_file" 2>&1) ;;
    *.tar.lzma | *.tlzma) std_output=$(tar --extract --lzma --file="$input_file" 2>&1) ;;
    *.tar.lzo | *.tzo) std_output=$(tar --extract --lzop --file="$input_file" 2>&1) ;;
    *.tar.xz | *.txz) std_output=$(tar --extract --xz --file="$input_file" 2>&1) ;;
    *.tar.Z | *.taz) std_output=$(tar --extract --gzip --file="$input_file" 2>&1) ;;
    *.tar.zst | *.tzst) std_output=$(tar --extract --zstd --file="$input_file" 2>&1) ;;
    *.7z) std_output=$("$task_data" x -aoa -- "$input_file" 2>&1) ;;
    *.bz) std_output=$(bunzip2 -- "$input_file" 2>&1) ;;
    *.bz2) std_output=$(bunzip2 -- "$input_file" 2>&1) ;;
    *.deb) std_output=$(ar x -- "$input_file" 2>&1) ;;
    *.gz) std_output=$(gunzip -- "$input_file" 2>&1) ;;
    *.lha) std_output=$(lha -x -- "$input_file" 2>&1) ;;
    *.lzip) std_output=$(lzip -d -- "$input_file" 2>&1) ;;
    *.lzma) std_output=$(unlzma -- "$input_file" 2>&1) ;;
    *.lzop) std_output=$(lzop -d -- "$input_file" 2>&1) ;;
    *.rar) std_output=$(unrar x -- "$input_file" 2>&1) ;;
    *.squashfs | *.sfs | *.sqsh) std_output=$(unsquashfs "$input_file" 2>&1) ;;
    *.tar) std_output=$(tar --extract --file="$input_file" 2>&1) ;;
    *.xz) std_output=$(unxz -- "$input_file" 2>&1) ;;
    *.Z) std_output=$(uncompress -- "$input_file" 2>&1) ;;
    *.zst) std_output=$(zstd --decompress -- "$input_file" 2>&1) ;;
    *) std_output=$("$task_data" x -aoa -- "$input_file" 2>&1) ;;
    esac

    # Check for result errors
    _check_result "$?" "$std_output" "$input_file" ""

    # Check if the archive has just one item (single file/directory compressed)
    count_root_items=$(find . -mindepth 1 -maxdepth 1 | wc -l)
    if ((count_root_items == 1)); then
        output_item=$(find . -mindepth 1 -maxdepth 1)
        output_item="${output_item#./}"
    fi
    popd &>/dev/null || return 1

    # Try to remove the temporary directory (if it is empty)
    rmdir "$temp_dir_output" &>/dev/null && return 1

    # Move the items to the correct directory
    if [[ "$filename" == "$output_item" ]] ||
        [[ "$filename" == "$(_get_filename_without_extension "$output_item")" ]]; then
        # For archive with "one item with same name of the archive"
        # For example: "README.TXT.tar.gz" or "README.tar.gz"
        std_output=$(_move_file "when_conflict=rename" "$temp_dir_output/$output_item" "$output_dir/$output_item" 2>&1)
        _check_result "$?" "$std_output" "$input_file" "" || return 1
    elif [[ "squashfs-root" == "$output_item" ]]; then
        # For SquashFS
        std_output=$(_move_file "when_conflict=rename" "$temp_dir_output/$output_item" "$output_dir/$filename" 2>&1)
        _check_result "$?" "$std_output" "$input_file" "" || return 1
    elif ((count_root_items > 0)); then
        # For archive with "one item with different name of the archive" or "multiple items"
        std_output=$(_move_file "when_conflict=rename" "$temp_dir_output" "$output_dir/$filename" 2>&1)
        _check_result "$?" "$std_output" "$input_file" "" || return 1
    fi

    # Remove the temporary directory
    rm -rf "$temp_dir_output"
}

_main "$@"
