#!/usr/bin/env bash

# Source the script 'common-functions.sh'.
SCRIPT_DIR=$(cd -- "$(dirname -- "${BASH_SOURCE[0]}")" &>/dev/null && pwd)
ROOT_DIR=$(grep --only-matching "^.*scripts[^/]*" <<<"$SCRIPT_DIR")
source "$ROOT_DIR/common-functions.sh"

_main() {
    local input_files=""
    local output_dir=""
    local users=""

    # Execute initial checks.
    _check_dependencies "gpg(apt:gpg,pacman:gnupg,dnf:gnupg)"
    _display_wait_box
    input_files=$(_get_files "type:file")
    output_dir=$(_get_output_dir "use_same_dir:true")

    users=$(gpg --list-secret-keys --with-colons | grep "^uid" | cut -d ':' -f 10)
    if [[ -z "$users" ]]; then
        _display_error_box "Signing failed: no secret keys installed!"
        _exit_script
    fi
    TASK_DATA=$(echo "$users" | tr ':' '\n' | zenity --list --title="Select a user" --text="Select a user from the list below." --column="User" --height=200 --width=600 2>/dev/null) || _exit_script
    if [[ -z "$TASK_DATA" ]]; then
        _display_error_box "Signing failed: you must select a user!"
        _exit_script
    fi

    # Execute the function '_main_task' for each file in parallel.
    _run_task_parallel "$input_files" "$output_dir"
    _display_result_box "$output_dir"
}

_main_task() {
    local input_file=$1
    local output_dir=$2
    local output_file=""
    local std_output=""

    # Run the main process.
    output_file=$(_get_output_file "$input_file" "$output_dir" "extension_option:append, extension:asc")
    std_output=$(gpg --batch --yes --sign --local-user "$TASK_DATA" --output "$output_file" -- "$input_file" 2>&1)
    _check_result "$?" "$std_output" "$input_file" "$output_file" || return 1
}

_main "$@"
