#!/usr/bin/env bash

# Source the script '.common-functions.sh'.
SCRIPT_DIR=$(cd -- "$(dirname -- "${BASH_SOURCE[0]}")" &>/dev/null && pwd)
ROOT_DIR=$(grep --only-matching "^.*scripts[^/]*" <<<"$SCRIPT_DIR")
source "$ROOT_DIR/.common-functions.sh"

_main() {
    local input_files=""
    local output_dir=""

    # Execute initial checks.
    _check_dependencies "gpg"
    _display_wait_box "2"
    input_files=$(_get_files "par_type=file")

    _get_users

    # Check output directory only after displaying dialog boxes to the user.
    output_dir=$(_get_output_dir "par_use_same_dir=true")

    # Execute the function '_main_task' for each file in parallel.
    _run_task_parallel "$input_files" "$output_dir"
    _display_result_box "$output_dir"
}

_main_task() {
    local input_file=$1
    local output_dir=$2
    local output_file=""
    local std_output=""

    IFS=$FIELD_SEPARATOR

    local recipients=()
    local user=""
    for user in $TEMP_DATA_TASK; do
        recipients+=("--recipient=$user")
    done

    output_file=$(_get_output_filename "$input_file" "$output_dir" "par_extension_opt=append; par_extension=gpg")

    # Run the main process.
    std_output=$(gpg \
        --batch \
        --yes \
        --encrypt \
        "${recipients[@]}" \
        --output "$output_file" \
        -- "$input_file" 2>&1)

    _check_output "$?" "$std_output" "$input_file" "$output_file" || return 1
}

_import_key() {
    local input_file=""
    local std_output=""
    local key_id=""

    input_file=$(_display_file_selection_box \
        "Key files | *.asc *.gpg *.pgp" \
        "Choose a key file to import.")

    if [[ -z "$input_file" ]]; then
        _exit_script
    fi

    # Get the ID from the key.
    key_id=$(gpg --with-colons --import-options show-only --import "$input_file" |
        grep -m1 "^fpr" | cut -d ":" -f 10 2>/dev/null)

    # Import the key.
    std_output=$(gpg --batch --yes --import "$input_file" 2>&1)
    _check_output "$?" "$std_output" "$input_file" "" || return 1

    # Set the trust level to 'ultimate'.
    std_output=$(printf "%s\n" "$key_id:6:" | gpg --batch --yes --import-ownertrust 2>&1)
    _check_output "$?" "$std_output" "$input_file" "" || return 1
}

_get_users() {
    local users=""
    users=$(gpg --list-public-keys --with-colons 2>/dev/null |
        grep --ignore-case "^uid" | cut -d ":" -f 10)
    if [[ -z "$users" ]]; then
        local message="No public keys were found.\n\nWould you like to import a key now?"
        if ! _display_question_box "$message"; then
            _exit_script
        fi
        _import_key
        users=$(gpg --list-public-keys --with-colons 2>/dev/null |
            grep --ignore-case "^uid" | cut -d ":" -f 10)
        if [[ -z "$users" ]]; then
            _display_error_box "Failed to import the public key!"
            _exit_script
        fi
    fi

    _display_lock
    if _command_exists "zenity" || _command_exists "yad"; then
        users=$(_convert_text_to_delimited_string "$users")
        local zenity_user_list=()

        local user=""
        for user in $users; do
            if (($(_get_items_count "$users") == 1)); then
                zenity_user_list+=(TRUE "$user")
            else
                zenity_user_list+=(FALSE "$user")
            fi
        done

        TEMP_DATA_TASK=$(_cmd_zenity \
            --list \
            --checklist \
            --title="Select users" \
            --text="Select one or more users from the list below." \
            --column="Select" \
            --column="User" "${zenity_user_list[@]}" \
            --width="$GUI_BOX_WIDTH" \
            --height="$GUI_BOX_HEIGHT" \
            --separator="$FIELD_SEPARATOR" 2>/dev/null) || _exit_script
    elif _command_exists "kdialog"; then
        # shellcheck disable=SC2001
        users=$(sed "s|\(.*\)|\1:\1:off|g" <<<"$users")
        users=$(tr ":\n" "$FIELD_SEPARATOR" <<<"$users")
        # shellcheck disable=SC2086
        TEMP_DATA_TASK=$(kdialog \
            --title "Select a user" \
            --geometry "${GUI_BOX_WIDTH}x${GUI_BOX_HEIGHT}" \
            --checklist "Select one or more users from the list below." \
            --separate-output \
            -- $users 2>/dev/null) || _exit_script
        TEMP_DATA_TASK=$(_convert_text_to_delimited_string "$TEMP_DATA_TASK")
    fi
    _display_unlock

    if [[ -z "$TEMP_DATA_TASK" ]]; then
        _display_error_box "Failed: you must select at least one user!"
        _exit_script
    fi
}

_main "$@"
