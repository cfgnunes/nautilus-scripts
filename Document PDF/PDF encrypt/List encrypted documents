#!/usr/bin/env bash

# Source the script 'common-functions.sh'.
SCRIPT_DIR=$(cd -- "$(dirname -- "${BASH_SOURCE[0]}")" &>/dev/null && pwd)
ROOT_DIR=$(grep --only-matching "^.*scripts[^/]*" <<<"$SCRIPT_DIR")
source "$ROOT_DIR/common-functions.sh"

_main() {
    local input_files=""
    local std_output=""

    # Execute initial checks.
    _check_dependencies "pdfinfo(apt:poppler-utils,pacman:poppler-glib,dnf:poppler-utils)"
    _display_wait_box
    input_files=$(_get_files "type:file, recursive:true, mime:application/pdf")

    # Execute the function '_main_task' for each file in parallel.
    _run_task_parallel "$input_files" ""

    std_output=$(_temp_result_read_all)
    std_output=$(_text_remove_empty_lines "$std_output")
    std_output=$(_text_sort "$std_output")

    _display_text_box "$std_output"
}

_main_task() {
    local input_file=$1
    local output_dir=$2
    local std_output=""
    local temp_file=""

    std_output=$(pdfinfo -- "$input_file" 2>&1)

    # Save the result only for 'encrypted' PDFs.
    if [[ "$std_output" == *"yes ("* ]]; then
        local pdf_information=""
        pdf_information=$std_output
        pdf_information=$(grep --only-matching "(print.*)" <<<"$pdf_information")
        # Work on a temporary file.
        temp_file=$(mktemp --tmpdir="$TEMP_DIR_TASK")
        echo "Protected $pdf_information: \"$(_text_remove_pwd "$input_file")\"" >"$temp_file"
        echo >>"$temp_file"
    elif [[ "$std_output" == *"Incorrect password"* ]]; then
        # Work on a temporary file.
        temp_file=$(mktemp --tmpdir="$TEMP_DIR_TASK")
        echo "Protected with password: \"$(_text_remove_pwd "$input_file")\"" >"$temp_file"
        echo >>"$temp_file"
    fi
}

_main "$@"
