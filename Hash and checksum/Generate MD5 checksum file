#!/usr/bin/env bash

# Source the script '.common-functions.sh'.
SCRIPT_DIR=$(cd -- "$(dirname -- "${BASH_SOURCE[0]}")" &>/dev/null && pwd)
ROOT_DIR=$(grep --only-matching "^.*scripts[^/]*" <<<"$SCRIPT_DIR")
source "$ROOT_DIR/.common-functions.sh"

_main() {
    local input_files=""
    local output_dir=""

    # Execute initial checks.
    _check_dependencies ""
    _display_wait_box "2"
    input_files=$(_get_files "par_type=file; par_recursive=true")

    local output_file=""
    local output_options=""
    if (($(_get_items_count "$input_files") == 1)); then
        local file_1=""
        file_1=$(cut -d "$FIELD_SEPARATOR" -f 1 <<<"$input_files")
        file_1=$(basename -- "$file_1")
        output_options+=$file_1
        output_options+=".md5"$'\n'
    fi
    output_options+="md5sum.txt"$'\n'
    output_options+="checksums.md5"$'\n'
    output_options+="MD5SUMS"$'\n'
    output_file=$(_select_output_filename "$output_options")

    output_dir=$(_get_output_dir "par_use_same_dir=true")

    # Execute the function '_main_task' for each file in parallel.
    _run_task_parallel "$input_files" "$output_dir"

    output_file=$(_get_output_filename "$output_file" "$output_dir" "par_extension_opt=preserve")

    local std_output=""
    std_output=$(_storage_text_read_all)
    std_output=$(_text_sort "$std_output")
    # shellcheck disable=SC2001
    std_output=$(sed "s|\(.*\)$FIELD_SEPARATOR\(.*\)|\2  \1|g" <<<"$std_output")
    printf "%s\n" "$std_output" >"$output_file"

    _display_result_box "$output_dir"
}

_main_task() {
    local input_file=$1
    local output_dir=$2
    local std_output=""

    # Run the main process.
    std_output=$(md5sum -- "$input_file" 2>/dev/null)
    if [[ -z "$std_output" ]]; then
        return
    fi

    std_output=$(_text_remove_pwd "$std_output")

    # shellcheck disable=SC2001
    std_output=$(sed "s|\([^ ]*\)\s*\(.*\)|\2$FIELD_SEPARATOR\1|g" <<<"$std_output")

    _storage_text_write_ln "$std_output"
}

_select_output_filename() {
    local options=$1
    local output_file=""

    _display_lock
    if ! _is_gui_session; then
        output_file=$(head -n 1 <<<"$options")
    elif _command_exists "zenity" || _command_exists "yad"; then
        options=$(_convert_text_to_delimited_string "$options")
        local zenity_options=()

        local first_option="true"
        local option=""
        for option in $options; do
            if [[ "$first_option" == "true" ]]; then
                zenity_options+=(TRUE "$option")
                first_option="false"
            else
                zenity_options+=(FALSE "$option")
            fi
        done

        output_file=$(_cmd_zenity --list --radiolist \
            --title="Select output checksum file" \
            --text="Select output checksum file from the list below." \
            --print-column "2" \
            --column="Select" \
            --column="Filename" "${zenity_options[@]}" \
            --width="$GUI_BOX_WIDTH" \
            --height="$GUI_BOX_HEIGHT" \
            --separator="$FIELD_SEPARATOR" 2>/dev/null) || _exit_script
        # Fix YAD output.
        if ! _command_exists "_zenity"; then
            output_file=$(tr "\n" "$FIELD_SEPARATOR" <<<"$output_file")
            output_file=$(_str_collapse_char "$output_file" "$FIELD_SEPARATOR")
        fi
    elif _command_exists "kdialog"; then
        # shellcheck disable=SC2001
        options=$(sed "s|\(.*\)|\1:\1:off|g" <<<"$options")
        options=$(tr ":\n" "$FIELD_SEPARATOR" <<<"$options")
        # shellcheck disable=SC2086
        output_file=$(kdialog \
            --title "Select output checksum file" \
            --geometry "${GUI_BOX_WIDTH}x${GUI_BOX_HEIGHT}" \
            --radiolist "Select output checksum file from the list below." \
            -- $options 2>/dev/null) || _exit_script
    fi
    _display_unlock

    if [[ -z "$output_file" ]]; then
        output_file=$(head -n 1 <<<"$options")
    fi

    printf "%s" "$output_file"
}

_main "$@"
