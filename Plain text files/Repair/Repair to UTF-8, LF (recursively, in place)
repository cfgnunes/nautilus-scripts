#!/usr/bin/env bash

# Import the script 'common-functions.sh'
SCRIPT_DIR=$(cd -- "$(dirname -- "${BASH_SOURCE[0]}")" &>/dev/null && pwd)
ROOT_DIR=$(grep --only-matching "^.*scripts[^/]*" <<<"$SCRIPT_DIR")
source "$ROOT_DIR/common-functions.sh"

# Initial checks
_check_dependencies "iconv(libc-bin) perl(perl-base)"
_display_wait_box
input_files=$(_get_files "$*" "type=file; recursive=true; mime=text,application; skip_encoding=binary; skip_extension=pdf,bak")

_main_task() {
    local input_file=$1
    local output_dir=$2
    local output_file=""
    local std_output=""
    local backup_file=""
    local temp_file1=""
    local temp_file2=""
    local temp_file3=""
    local temp_file4=""

    # Work on a temporary file
    temp_file1=$(mktemp --tmpdir="$TEMP_DIR_TASK" --suffix="-file1")
    temp_file2=$(mktemp --tmpdir="$TEMP_DIR_TASK" --suffix="-file2")
    temp_file3=$(mktemp --tmpdir="$TEMP_DIR_TASK" --suffix="-file3")
    temp_file4=$(mktemp --tmpdir="$TEMP_DIR_TASK" --suffix="-file4")

    # Run the process (part 1) 'convert encoding to utf-8'
    std_output=$(iconv -f "$(file --brief --mime-encoding -- "$input_file")" "$input_file" -t utf-8 -o "$temp_file1")
    _check_result "$?" "$std_output" "$input_file" "" || return 1

    # Run the process (part 2) 'convert line ending to unix'
    std_output=$(perl -pe 's/\r\n|\n|\r/\n/g' "$temp_file1" >"$temp_file2")
    _check_result "$?" "$std_output" "$input_file" "" || return 1

    # Run the process (part 3) 'remove trailing spaces'
    std_output=$(sed 's|[ \t]*\(\r*\)$|\1|' "$temp_file2" >"$temp_file3")
    _check_result "$?" "$std_output" "$input_file" "" || return 1

    # Run the process (part 4) 'remove empty line in EOF'
    echo "" >>"$temp_file3"
    std_output=$(sed ':Loop;N;$!bLoop;s|\n*$||g' "$temp_file3" >"$temp_file4")
    _check_result "$?" "$std_output" "$input_file" "" || return 1

    # Move the temporary file to the output
    output_file=$input_file
    _move_temp_file_to_output "$input_file" "$temp_file4" "$output_file" || return 1

    # Remove the temporary files on each iteration (if not removed before)
    rm -rf "$temp_file1"
    rm -rf "$temp_file2"
    rm -rf "$temp_file3"
    rm -rf "$temp_file4"
}

_run_main_task_parallel "$input_files" ""
_display_result_box ""
